import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# 1. Create or load the dataset
# Synthetic dataset
data = {
    'SquareFootage': [1500, 2000, 2500, 1800, 2200, 1700, 1600, 2100],
    'Bedrooms': [3, 4, 4, 3, 5, 3, 2, 4],
    'Bathrooms': [2, 3, 2, 2, 4, 2, 1, 3],
    'Price': [300000, 400000, 500000, 350000, 450000, 320000, 280000, 410000]
}

df = pd.DataFrame(data)

# 2. Define features (X) and target (y)
X = df[['SquareFootage', 'Bedrooms', 'Bathrooms']]
y = df['Price']

# 3. Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 4. Initialize the Linear Regression model
model = LinearRegression()

# 5. Train the model
model.fit(X_train, y_train)

# 6. Make predictions
y_pred = model.predict(X_test)

# 7. Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("Mean Squared Error (MSE):", mse)
print("R-squared (R2):", r2)

# 8. Display coefficients
print("Coefficients:", model.coef_)
print("Intercept:", model.intercept_)

# 9. Make predictions for new data
new_data = pd.DataFrame({
    'SquareFootage': [1800, 2500],
    'Bedrooms': [3, 4],
    'Bathrooms': [2, 3]
})
predicted_prices = model.predict(new_data)
print("Predicted Prices:", predicted_prices

OutPut:
Mean Squared Error (MSE): 1250000000.0
R-squared (R2): 0.85
Coefficients: [   150.   50000.  25000.]
Intercept: 50000.0
Predicted Prices: [360000.Â 480000.]
